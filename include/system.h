// system.h

#ifndef ECS_SYSTEM_H
#define ECS_SYSTEM_H

#include "ecs.h"

/*
    This function is called every update cycle to allow the system to update
    components.

    It is passed an array of Component pointers, according to the collection
    generated by the system's collection function.
*/
typedef void (*system_update_func)(Entity *ent, ComponentInfo **comps, void *udata);

/*
    This function is called when an event is sent to the system.

    The function should return true if the event has been processed.
*/
typedef bool (*system_event_func)(Event *ev, void *udata);

/*
    Information about a system's update function.
    By default, all these options are false or NULL; systems must
    specifically enable them via ECS_SystemSetUpdateInfo.

    The ECS will use these options to determine when and where to schedule
    system updates, as well as whether to update on the main thread or in a
    background thread.
*/
typedef struct {
    // If not thread safe, will always update on the main thread.
    bool IsThreadSafe;

    // If the system depends on other entities besides the one being
    // updated, it cannot be run in parallel with other systems or
    bool UpdatesOtherEntities;

    // A NULL-terminated list of systems this system must run after.
    const char **BeforeSystems;

    // A NULL-terminated list of systems this system must run before.
    const char **AfterSystems;

    // A NULL-terminated list of component types. Components passed to the
    // update function will always be in this order.

    // If this is NULL, the system does not operate on components and will
    // only be updated once per cycle.
    const char **Collection;
} SystemUpdateInfo;

/*
    Register a system.

    @param name: the name of the system.

    @param update: the update function to call when generating ECS updates.

    @param event: the event function to call when an event is generated for
    this system.

    @param collection: a NULL-delimited list of component names the system
    wants to act upon. Updates are generated for each entity that has all
    of these components.

    @param data: a pointer to the system's userdata. This could be a struct
    with state,
*/
bool ECS_SystemRegister(
    ECS *ecs,
    const char *name,
    system_update_func update,
    system_event_func event,
    SystemUpdateInfo info,
    void *data
);

/*
    Unregister a system from the ECS. The calling code should free the system's
    userdata pointer if present.
*/
void ECS_SystemUnregister(ECS *ecs, const char *name);

/* -------------------------------------------------------------------------- */

/*
    Send an event to a system.
*/
bool ECS_SystemQueueEvent(ECS *ecs, const char *name);

/* -------------------------------------------------------------------------- */

/*
    Macros for easy creation of systems.

    SYSTEM() and SYSTEM_IMPL() declare a custom data struct for your system,
    which is registered with REGISTER_SYSTEM().

    REGISTER_SYSTEM_NO_UDATA() registers a system without any extra data.
*/
#define SYSTEM(T) \
    typedef struct T T;

#define SYSTEM_IMPL(T) \
    static inline void T##_update(Entity *e, ComponentInfo **c, T *p); \
    static void T##_uf(Entity *e, ComponentInfo **c, void *p) { return T##_update(e, c, (T *)p); }; \
    static inline bool T##_event(Event *e, T *p); \
    static bool T##_ef(Event *e, void *p) { return T##_event(e, (T *)p); };

#define REGISTER_SYSTEM(ECS, T, INST) \
    ECS_SystemRegister(ECS, #T, T##_uf, T##_ef, T##_update_info, INST)

#define REGISTER_SYSTEM_NO_UDATA(ECS, T) \
    ECS_SystemRegister(ECS, #T, T##_update, T##_event, T##_update_info, NULL)

#endif /* end of include guard: ECS_SYSTEM_H */
