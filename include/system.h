// system.h

#ifndef ECS_SYSTEM_H
#define ECS_SYSTEM_H

#include "ecs.h"

/*
    This function is called every update cycle to allow the system to update
    components.

    It is passed an array of Component pointers, according to the collection
    generated by the system's collection function.
*/
typedef void (*system_update_func)(Entity ent, Component **comps, void *udata);

/*
    This function is called when an event is sent to the system.

    The function should return true if the event has been processed.
*/
typedef bool (*system_event_func)(Event *ev, void *udata);

/*
    Information about a system's update function.
    By default, all these options are false or NULL; systems must
    specifically enable them via ECS_SystemSetUpdateInfo.

    The ECS will use these options to determine when and where to schedule
    system updates, as well as whether to update on the main thread or in a
    background thread.
*/
typedef struct {
    // If not thread safe, will always update on the main thread.
    bool IsThreadSafe;

    // If the system depends on other entities besides the one being
    // updated, it cannot be run in parallel with other systems or
    bool UpdatesOtherEntities;

    // If the system needs to create entities, it must run on the main
    // thread.
    bool CreatesOrDeletesEntities;

    // A NULL-terminated list of systems this system must run before.
    const char **AfterSystems;
} SystemUpdateInfo;

/*

*/
typedef struct {
    const char *name;
    const SystemUpdateInfo *update_info;

    // The components the system operates on. If NULL, the system will only
    // be updated once per cycle.
    EntityArchetype *archetype;

    system_update_func update;
    system_event_func event;
} SystemRegistryInfo;

/*
    Register a system.

    @param name: the name of the system.
    @param reg: the system's registry info.
*/
bool ECS_SystemRegister(ECS *ecs, const SystemRegistryInfo *reg, void *udata);

/*
    Unregister a system from the ECS. The calling code should free the system's
    userdata pointer if present.
*/
void ECS_SystemUnregister(ECS *ecs, const char *name);

/* -------------------------------------------------------------------------- */

/*
    Send an event to a system.
*/
bool ECS_SystemQueueEvent(ECS *ecs, const char *name);

/* -------------------------------------------------------------------------- */

/*
    Macros for easy creation of systems.

    SYSTEM() and SYSTEM_IMPL() declare a custom data struct for your system,
    which is registered with REGISTER_SYSTEM().

    REGISTER_SYSTEM_NO_UDATA() registers a system without any extra data.
*/
#define SYSTEM(T) \
    typedef struct T T;

#define SYSTEM_IMPL(T) \
    static inline void T##_update(Entity e, Component **c, T *p); \
    static void T##_uf(Entity e, Component **c, void *p) { return T##_update(e, c, (T *)p); }; \
    static inline bool T##_event(Event *e, T *p); \
    static bool T##_ef(Event *e, void *p) { return T##_event(e, (T *)p); }; \
    const SystemUpdateInfo T##_update_info; \
    SystemRegistryInfo T##_reg = { \
        #T, &T##_update_info, NULL, T##_uf, T##_ef \
    }; \

#define ComponentWrite(T) #T
#define ComponentRead(T) #T

#define REGISTER_SYSTEM(ECS, T, INST) \
    ECS_SystemRegister(ECS, &T##_reg, INST)

#define REGISTER_SYSTEM_NO_UDATA(ECS, T) \
    ECS_SystemRegister(ECS, #T, &T##_reg, NULL)

#endif /* end of include guard: ECS_SYSTEM_H */
